using UnityEngine;
using UnityEngine.UI;

public class LocationExample : MonoBehaviour
{
	[SerializeField] private Text addressLabel;		// 住所を表示するテキスト
	[SerializeField] private Text latitudeLabel;	// 緯度を表示するテキスト
	[SerializeField] private Text longitudeLabel;	// 経度を表示するテキスト
	[SerializeField] private Text speedLabel;		// 移動速度を表示するテキスト
	[SerializeField] private Text accuracyLabel;	// 精度を表示するテキスト
	
	// 位置情報の取得中かどうかを取得、設定するプロパティ
	private bool IsUpdatingLocation { get; set; }
	
	void Awake()
	{
		IsUpdatingLocation = false;
		UpdateUpdateLocationButton();
	}

	private void UpdateUpdateLocationButton()
	{
		Animator animator = GetComponent<Animator>();
		if(animator != null)
		{
			animator.SetTrigger(IsUpdatingLocation? "Started": "Stopped");
		}
	}
	
	// 位置情報取得の開始/停止ボタンが押されたときに呼ばれるメソッド
	public void OnPressUpdateLocationButton()
	{
		// ボタンが押されるたびに位置情報取得の開始/停止を切り替える
		IsUpdatingLocation = !IsUpdatingLocation;
		if(IsUpdatingLocation)
		{
			// 位置情報の取得を開始する
			if(!LocationPluginInterface.StartUpdatingLocation(this.name))
			{
				IsUpdatingLocation = false;
				return;
			}
		}
		else
		{
			// 位置情報の取得を停止する
			LocationPluginInterface.StopUpdatingLocation();
		}
		UpdateUpdateLocationButton();
	}
	
	// 位置情報が更新されたときに、ネイティブプラグインから呼ばれるコールバックメソッド
	public void OnUpdateLocation(string parameter)
	{
		// パラメーターとして渡された文字列から必要な情報を取り出して表示する
		string[] components = parameter.Split(new char[] {'\t'}, 5);
		float latitude = float.Parse(components[0]);
		float longitude = float.Parse(components[1]);
		float speed = float.Parse(components[2]);
		float accuracy = float.Parse(components[3]);
		string address = components[4];

		addressLabel.text = address;
		latitudeLabel.text = string.Format("{0:0}° {1:0}′", 
			Mathf.Floor(latitude), (latitude - Mathf.Floor(latitude)) * 60);
		longitudeLabel.text = string.Format("{0:0}° {1:0}′", 
			Mathf.Floor(longitude), (longitude - Mathf.Floor(longitude)) * 60);
		speedLabel.text = string.Format("{0:0.0} m/s", (speed >= 0.0f)? speed: 0.0f);
		accuracyLabel.text = string.Format("{0} m", accuracy);
	}
}
